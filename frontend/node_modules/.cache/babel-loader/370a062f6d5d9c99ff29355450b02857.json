{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nexport default {\n  name: 'admin-post-page',\n  data: function () {\n    return {\n      post: {\n        title: '',\n        status: 'draft',\n        description: ''\n      },\n      errors: {\n        title: '',\n        status: '',\n        description: ''\n      },\n      status: ['publish', 'draft', 'private']\n    };\n  },\n  watch: {\n    'post.title': function (newTitle) {\n      this.errors.title = newTitle ? '' : 'Title is required';\n    },\n    'post.status': function (newStatus) {\n      this.errors.status = this.status.includes(newStatus) ? '' : 'Status is required';\n    },\n    'post.description': function (newDesc) {\n      this.errors.description = newDesc ? '' : 'Post description is required';\n    }\n  },\n  computed: {\n    isFormValid: function () {\n      let valid = true;\n      const self = this;\n\n      for (const [key, value] of Object.entries(self.errors)) {\n        if (self.post[key] == '' || value != '') {\n          valid = false;\n          break;\n        }\n      }\n\n      return valid;\n    }\n  },\n  methods: {\n    clear: function () {\n      this.post = {\n        title: '',\n        status: 'draft',\n        description: ''\n      };\n    },\n    create: function (e) {\n      e.preventDefault();\n      const self = this;\n      if (self.isFormValid == false) return false;\n      self.$store.commit('loading', true);\n      self.axios.post(self.$api_url + 'admin/posts', self.post, {\n        withCredentials: true\n      }).then(res => {\n        self.$toast.success(res.data.message);\n        self.clear();\n      }).catch(err => {\n        const message = err.response.data.message ? err.response.data.message : err.message;\n        self.$toast.error(message);\n      }).finally(() => {\n        self.$store.commit('loading', false);\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AA6BI,eAAe;EACXA,IAAI,EAAE,iBADK;EAEXC,IAAI,EAAE,YAAU;IACZ,OAAO;MACHC,IAAG,EAAI;QACHC,KAAI,EAAI,EADL;QAEHC,MAAK,EAAI,OAFN;QAGHC,WAAU,EAAI;MAHX,CADJ;MAMHC,MAAK,EAAI;QACLH,KAAI,EAAI,EADH;QAELC,MAAK,EAAI,EAFJ;QAGLC,WAAU,EAAI;MAHT,CANN;MAWHD,MAAK,EAAI,CAAC,SAAD,EAAY,OAAZ,EAAqB,SAArB;IAXN,CAAP;EAaH,CAhBU;EAiBXG,KAAK,EAAC;IACF,cAAc,UAASC,QAAT,EAAkB;MAC5B,KAAKF,MAAL,CAAYH,KAAZ,GAAqBK,QAAO,GAAI,EAAJ,GAAS,mBAArC;IACH,CAHC;IAIF,eAAe,UAASC,SAAT,EAAmB;MAC9B,KAAKH,MAAL,CAAYF,MAAZ,GAAsB,KAAKA,MAAL,CAAYM,QAAZ,CAAqBD,SAArB,IAAkC,EAAlC,GAAuC,oBAA7D;IACH,CANC;IAOF,oBAAoB,UAASE,OAAT,EAAiB;MACjC,KAAKL,MAAL,CAAYD,WAAZ,GAA2BM,OAAM,GAAI,EAAJ,GAAS,8BAA1C;IACH;EATC,CAjBK;EA4BXC,QAAQ,EAAC;IACLC,WAAW,EAAE,YAAU;MACnB,IAAIC,KAAI,GAAI,IAAZ;MACA,MAAMC,IAAG,GAAI,IAAb;;MACA,KAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,IAAI,CAACT,MAApB,CAA3B,EAAwD;QACpD,IAAGS,IAAI,CAACb,IAAL,CAAUc,GAAV,KAAkB,EAAlB,IAAwBC,KAAI,IAAK,EAApC,EAAuC;UACnCH,KAAI,GAAI,KAAR;UACA;QACJ;MACJ;;MACA,OAAOA,KAAP;IACJ;EAXK,CA5BE;EAyCXM,OAAM,EAAI;IACNC,KAAK,EAAE,YAAU;MACb,KAAKnB,IAAL,GAAY;QACRC,KAAI,EAAI,EADA;QAERC,MAAK,EAAI,OAFD;QAGRC,WAAU,EAAI;MAHN,CAAZ;IAKH,CAPK;IAQNiB,MAAM,EAAE,UAASC,CAAT,EAAW;MACfA,CAAC,CAACC,cAAF;MACA,MAAMT,IAAG,GAAI,IAAb;MACA,IAAGA,IAAI,CAACF,WAAL,IAAoB,KAAvB,EACI,OAAO,KAAP;MAEJE,IAAI,CAACU,MAAL,CAAYC,MAAZ,CAAmB,SAAnB,EAA8B,IAA9B;MACAX,IAAI,CAACY,KAAL,CAAWzB,IAAX,CAAgBa,IAAI,CAACa,QAAL,GAAgB,aAAhC,EAA+Cb,IAAI,CAACb,IAApD,EAA0D;QAAE2B,eAAe,EAAE;MAAnB,CAA1D,EACKC,IADL,CACUC,GAAE,IAAK;QACThB,IAAI,CAACiB,MAAL,CAAYC,OAAZ,CAAoBF,GAAG,CAAC9B,IAAJ,CAASiC,OAA7B;QACAnB,IAAI,CAACM,KAAL;MACH,CAJL,EAKKc,KALL,CAKWC,GAAE,IAAK;QACV,MAAMF,OAAM,GAAIE,GAAG,CAACC,QAAJ,CAAapC,IAAb,CAAkBiC,OAAlB,GAA4BE,GAAG,CAACC,QAAJ,CAAapC,IAAb,CAAkBiC,OAA9C,GAAwDE,GAAG,CAACF,OAA5E;QACAnB,IAAI,CAACiB,MAAL,CAAYM,KAAZ,CAAkBJ,OAAlB;MACH,CARL,EASKK,OATL,CASa,MAAM;QACXxB,IAAI,CAACU,MAAL,CAAYC,MAAZ,CAAmB,SAAnB,EAA8B,KAA9B;MACH,CAXL;IAYJ;EA3BM;AAzCC,CAAf","names":["name","data","post","title","status","description","errors","watch","newTitle","newStatus","includes","newDesc","computed","isFormValid","valid","self","key","value","Object","entries","methods","clear","create","e","preventDefault","$store","commit","axios","$api_url","withCredentials","then","res","$toast","success","message","catch","err","response","error","finally"],"sourceRoot":"","sources":["C:\\Users\\RajibDas\\Desktop\\laravel+vue\\frontend\\src\\components\\pages\\departments\\Create.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"page-title\">\r\n            <span>Create Department</span>\r\n        </div>\r\n        <div class=\"card\">\r\n            <div class=\"card-body\">\r\n\r\n                <form v-on:submit=\"create($event)\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"title\">Name <span class=\"text-danger\">*</span></label>\r\n                        <input v-model=\"post.name\" type=\"text\" class=\"form-control\" id=\"title\" placeholder=\"Post Title\">\r\n                        <small class=\"form-text text-danger\">{{ errors.name }}</small>\r\n                    </div>\r\n\r\n                    <div class=\"text-center my-3\">\r\n                        <button type=\"button\" class=\"btn btn-default mr-3\" @click=\"$router.push('/departments')\">Back</button>\r\n                        <button type=\"submit\" class=\"btn btn-success\" :disabled=\"!isFormValid\">Create</button>\r\n                    </div>\r\n                </form>\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: 'admin-post-page',\r\n        data: function(){\r\n            return {\r\n                post : {\r\n                    title : '',\r\n                    status : 'draft',\r\n                    description : ''\r\n                },\r\n                errors : {\r\n                    title : '',\r\n                    status : '',\r\n                    description : ''\r\n                },\r\n                status : ['publish', 'draft', 'private']\r\n            }\r\n        },\r\n        watch:{\r\n            'post.title': function(newTitle){\r\n                this.errors.title =  newTitle ? '' : 'Title is required';\r\n            },\r\n            'post.status': function(newStatus){\r\n                this.errors.status =  this.status.includes(newStatus) ? '' : 'Status is required';\r\n            },\r\n            'post.description': function(newDesc){\r\n                this.errors.description =  newDesc ? '' : 'Post description is required';\r\n            },\r\n        },\r\n        computed:{\r\n            isFormValid: function(){\r\n                let valid = true;\r\n                const self = this;\r\n                for (const [key, value] of Object.entries(self.errors)) {\r\n                    if(self.post[key] == '' || value != ''){\r\n                        valid = false;\r\n                        break;\r\n                    }\r\n                }\r\n                return valid;\r\n            }\r\n        },\r\n        methods : {\r\n            clear: function(){\r\n                this.post = {\r\n                    title : '',\r\n                    status : 'draft',\r\n                    description : ''\r\n                }\r\n            },\r\n            create: function(e){\r\n                e.preventDefault();\r\n                const self = this;\r\n                if(self.isFormValid == false)\r\n                    return false;\r\n\r\n                self.$store.commit('loading', true);\r\n                self.axios.post(self.$api_url + 'admin/posts', self.post, { withCredentials: true,})\r\n                    .then(res => {\r\n                        self.$toast.success(res.data.message);\r\n                        self.clear();\r\n                    })\r\n                    .catch(err => {\r\n                        const message = err.response.data.message ? err.response.data.message : err.message;\r\n                        self.$toast.error(message);\r\n                    })\r\n                    .finally(() => {\r\n                        self.$store.commit('loading', false);\r\n                    });\r\n            }\r\n\r\n        }\r\n    }\r\n</script>"]},"metadata":{},"sourceType":"module"}