{"ast":null,"code":"export default {\n  name: 'auth-login',\n  data: function () {\n    return {\n      loading: false,\n      user: {\n        email: '',\n        password: '',\n        remember: false\n      },\n      errors: {\n        email: '',\n        password: ''\n      }\n    };\n  },\n  watch: {\n    'user.email': function (newEmail) {\n      let email_regex = /\\S+@\\S+\\.\\S+/;\n      if (newEmail == '') this.errors.email = 'Email address is required';else if (email_regex.test(newEmail) == false) this.errors.email = 'Email address is not valid';else this.errors.email = '';\n    },\n    'user.password': function (newPassword) {\n      if (newPassword == '') this.errors.password = 'Password is required';else if (newPassword.length < 6) this.errors.password = 'Password should be at least 6 characters';else this.errors.password = '';\n    }\n  },\n  computed: {\n    isFormValid: function () {\n      let valid = true;\n      const self = this;\n\n      for (const [key, value] of Object.entries(self.errors)) {\n        if (self.user[key] == '' || value != '') {\n          valid = false;\n          break;\n        }\n      }\n\n      return valid;\n    }\n  },\n  methods: {\n    login: function (e) {\n      e.preventDefault();\n      const self = this;\n      if (self.isFormValid == false) return false;\n      self.loading = true;\n      self.axios.post(self.$api_url + 'login', self.user, {\n        withCredentials: true,\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        this.$store.commit('setAuth', res.data);\n        this.$router.push('/');\n      }).catch(err => {\n        console.log(err);\n      }).finally(() => {\n        self.loading = false;\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAiDA,eAAe;EACbA,IAAI,EAAE,YADO;EAEbC,IAAI,EAAE,YAAU;IACd,OAAO;MACHC,OAAM,EAAI,KADP;MAEHC,IAAG,EAAI;QACHC,KAAI,EAAI,EADL;QAEHC,QAAO,EAAI,EAFR;QAGHC,QAAO,EAAI;MAHR,CAFJ;MAOHC,MAAK,EAAI;QACLH,KAAI,EAAI,EADH;QAELC,QAAO,EAAI;MAFN;IAPN,CAAP;EAYD,CAfY;EAgBbG,KAAK,EAAC;IACA,cAAc,UAASC,QAAT,EAAkB;MAC5B,IAAIC,WAAU,GAAI,cAAlB;MACA,IAAGD,QAAO,IAAK,EAAf,EACI,KAAKF,MAAL,CAAYH,KAAZ,GAAoB,2BAApB,CADJ,KAEK,IAAGM,WAAW,CAACC,IAAZ,CAAiBF,QAAjB,KAA8B,KAAjC,EACD,KAAKF,MAAL,CAAYH,KAAZ,GAAoB,4BAApB,CADC,KAGD,KAAKG,MAAL,CAAYH,KAAZ,GAAoB,EAApB;IACP,CATD;IAUA,iBAAiB,UAASQ,WAAT,EAAqB;MAClC,IAAGA,WAAU,IAAK,EAAlB,EACI,KAAKL,MAAL,CAAYF,QAAZ,GAAuB,sBAAvB,CADJ,KAEK,IAAGO,WAAW,CAACC,MAAZ,GAAqB,CAAxB,EACD,KAAKN,MAAL,CAAYF,QAAZ,GAAuB,0CAAvB,CADC,KAGD,KAAKE,MAAL,CAAYF,QAAZ,GAAuB,EAAvB;IACP;EAjBD,CAhBO;EAmCbS,QAAQ,EAAC;IACHC,WAAW,EAAE,YAAU;MACnB,IAAIC,KAAI,GAAI,IAAZ;MACA,MAAMC,IAAG,GAAI,IAAb;;MACA,KAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,IAAI,CAACV,MAApB,CAA3B,EAAwD;QACpD,IAAGU,IAAI,CAACd,IAAL,CAAUe,GAAV,KAAkB,EAAlB,IAAwBC,KAAI,IAAK,EAApC,EAAuC;UACnCH,KAAI,GAAI,KAAR;UACA;QACJ;MACJ;;MACA,OAAOA,KAAP;IACJ;EAXG,CAnCI;EAgDbM,OAAO,EAAE;IACPC,KAAK,EAAE,UAASC,CAAT,EAAW;MACdA,CAAC,CAACC,cAAF;MACA,MAAMR,IAAG,GAAI,IAAb;MACA,IAAGA,IAAI,CAACF,WAAL,IAAoB,KAAvB,EACI,OAAO,KAAP;MAEJE,IAAI,CAACf,OAAL,GAAe,IAAf;MACAe,IAAI,CAACS,KAAL,CAAWC,IAAX,CAAgBV,IAAI,CAACW,QAAL,GAAgB,OAAhC,EAAyCX,IAAI,CAACd,IAA9C,EAAoD;QAC5C0B,eAAe,EAAE,IAD2B;QAE5CC,OAAO,EAAE;UACLC,MAAM,EAAE,kBADH;UAEL,gBAAgB;QAFX;MAFmC,CAApD,EAOKC,IAPL,CAOUC,GAAE,IAAK;QACT,KAAKC,MAAL,CAAYC,MAAZ,CAAmB,SAAnB,EAA8BF,GAAG,CAAChC,IAAlC;QACA,KAAKmC,OAAL,CAAaC,IAAb,CAAkB,GAAlB;MACH,CAVL,EAWKC,KAXL,CAWWC,GAAE,IAAK;QACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACH,CAbL,EAcKG,OAdL,CAca,MAAM;QACXzB,IAAI,CAACf,OAAL,GAAe,KAAf;MACH,CAhBL;IAiBJ;EAzBO;AAhDI,CAAf","names":["name","data","loading","user","email","password","remember","errors","watch","newEmail","email_regex","test","newPassword","length","computed","isFormValid","valid","self","key","value","Object","entries","methods","login","e","preventDefault","axios","post","$api_url","withCredentials","headers","Accept","then","res","$store","commit","$router","push","catch","err","console","log","finally"],"sourceRoot":"","sources":["C:\\Users\\RajibDas\\Desktop\\laravel+vue\\frontend\\src\\components\\auth\\Register.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"page-title\">\n      <span>Login</span>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-sm-4 offset-sm-4\">\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <form class=\"my-3\" @submit=\"login($event)\">\n\n                        <div class=\"form-group mb-4\">\n                            <div class=\"input-group\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\"><i class=\"far fa-envelope\"></i></span>\n                                </div>\n                                <input v-model=\"user.email\" type=\"email\" class=\"form-control\" placeholder=\"Email address\" :readonly=\"loading\">                            \n                            </div>\n                            <small class=\"form-text text-danger\">{{ errors.email }}</small>\n                        </div>\n\n                        <div class=\"form-group mb-4\">\n                            <div class=\"input-group\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\"><i class=\"fas fa-lock-open\"></i></span>\n                                </div>\n                                <input v-model=\"user.password\" type=\"password\" class=\"form-control\" placeholder=\"Password\" :readonly=\"loading\">                                \n                            </div>\n                            <small class=\"form-text text-danger\">{{ errors.password }}</small>\n                       </div>\n\n                        <div class=\"form-check\">\n                            <input v-model=\"user.remember\" type=\"checkbox\" class=\"form-check-input\" id=\"remember\" value=\"true\" :disabled=\"loading\">\n                            <label class=\"form-check-label\" for=\"remember\">Remember me</label>\n                        </div>\n\n                        <div class=\"form-group text-center mt-3\">\n                            <button type=\"submit\" class=\"btn btn-success\" :disabled=\"!isFormValid || loading\">{{ loading ? 'Logging..' : 'Login' }}</button>\n                        </div>  \n\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>   \n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'auth-login',\n  data: function(){\n    return {\n        loading : false,\n        user : {\n            email : '',\n            password : '',\n            remember : false\n        },\n        errors : {\n            email : '',\n            password : ''\n        }\n    }\n  },\n  watch:{\n        'user.email': function(newEmail){\n            let email_regex = /\\S+@\\S+\\.\\S+/;\n            if(newEmail == '')\n                this.errors.email = 'Email address is required';\n            else if(email_regex.test(newEmail) == false)\n                this.errors.email = 'Email address is not valid'; \n            else\n                this.errors.email = '';             \n        },\n        'user.password': function(newPassword){\n            if(newPassword == '')\n                this.errors.password = 'Password is required';\n            else if(newPassword.length < 6)\n                this.errors.password = 'Password should be at least 6 characters'; \n            else\n                this.errors.password = '';             \n        },\n  },\n  computed:{\n        isFormValid: function(){\n            let valid = true;\n            const self = this;\n            for (const [key, value] of Object.entries(self.errors)) {\n                if(self.user[key] == '' || value != ''){\n                    valid = false;\n                    break;\n                }\n            }            \n            return valid;\n        }\n  },\n  methods: {\n    login: function(e){\n        e.preventDefault();\n        const self = this;\n        if(self.isFormValid == false)\n            return false;\n\n        self.loading = true;\n        self.axios.post(self.$api_url + 'login', self.user, {\n                withCredentials: true,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            })\n            .then(res => {\n                this.$store.commit('setAuth', res.data);\n                this.$router.push('/');\n            })\n            .catch(err => {\n                console.log(err);\n            })\n            .finally(() => {\n                self.loading = false;\n            });\n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module"}